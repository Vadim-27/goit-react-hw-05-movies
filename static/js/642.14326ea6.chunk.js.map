{"version":3,"file":"static/js/642.14326ea6.chunk.js","mappings":"sSAEMA,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAY,mCAAG,WAAOC,GAAP,yFACHN,EAASO,IAAI,eAAgB,CAC9CJ,OAAQ,CACJG,MAAAA,KAHgB,uBACjBE,EADiB,EACjBA,KADiB,kBAQjBA,GARiB,2CAAH,sDAWZC,EAAc,mCAAG,sGACHT,EAASO,IAAI,iBADV,uBAClBC,EADkB,EAClBA,KADkB,kBAGnBA,GAHmB,2CAAH,qDAOdE,EAAY,mCAAG,WAAMC,GAAN,yFACHX,EAASO,IAAT,gBAAsBI,IADnB,uBAClBH,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAMZI,EAAW,mCAAG,WAAMD,GAAN,yFACAX,EAASO,IAAT,iBAAuBI,EAAvB,aADA,uBACfH,EADe,EACfA,KADe,kBAGlBA,GAHkB,2CAAH,sDAMXK,EAAc,mCAAG,WAAMF,GAAN,yFACHX,EAASO,IAAT,iBAAuBI,EAAvB,aADG,uBAClBH,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,yGCI3B,UAtCoB,WAClB,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,GACX,IAAME,EAAY,mCAAG,8GAEEX,EAAAA,EAAAA,IAAeC,GAFjB,OAEXN,EAFW,OAGjBU,EAAWV,EAAKiB,SAHC,gDAKjBL,EAAS,EAAD,IALS,yBAOjBE,GAAW,GAPM,4EAAH,qDAUlBE,GACD,GAAE,CAACV,IAEJ,IAAMY,EAAWT,EAAQU,KAAI,YAA8B,IAA3BhB,EAA0B,EAA1BA,GAAIiB,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1C,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGlB,EAKZ,IAED,OACE,gCACGQ,IAAS,yCACTE,IAAa,sCACM,IAAnBJ,EAAQa,SAAgB,wBAAKJ,MAGnC,C","sources":["components/shared/services/movies-api.js","pages/ReviewsPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'd91911ebb88751cf9e5c4b8fdf4412c9',\n    }\n})\n\nexport const searchMovies = async (query) => {\n    const {data} = await instance.get('search/movie', {\n        params: {\n            query,\n           \n        }\n    })\n   \n    return data;\n}\n\nexport const getMostPopular = async () => {\n    const { data } = await instance.get('movie/popular')\n    \n    return data;\n}\n\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`movie/${id}`);\n  return data;\n}\n\n\nexport const getCastById = async id => {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    \n  return data;\n};\n\nexport const getReviewsById = async id => {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n}\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsById } from 'components/shared/services/movies-api';\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchReviews = async () => {\n      try {\n        const data = await getReviewsById(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  const elements = reviews.map(({ id, author, content }) => {\n    return (\n      <li key={id}>\n        <h4>{author}</h4>\n        <p>{content}</p>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      {error && <p>error message</p>}\n      {isLoading && <p>...Loading</p>}\n      {reviews.length !== 0 && <ul>{elements}</ul>}\n    </>\n  );\n};\nexport default ReviewsPage;\n"],"names":["instance","axios","baseURL","params","api_key","searchMovies","query","get","data","getMostPopular","getMovieById","id","getCastById","getReviewsById","movieId","useParams","useState","reviews","setReviews","error","setError","isLoading","setLoading","useEffect","fetchReviews","results","elements","map","author","content","length"],"sourceRoot":""}