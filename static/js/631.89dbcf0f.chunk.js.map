{"version":3,"file":"static/js/631.89dbcf0f.chunk.js","mappings":"sSAEMA,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAY,mCAAG,WAAOC,GAAP,yFACHN,EAASO,IAAI,eAAgB,CAC9CJ,OAAQ,CACJG,MAAAA,KAHgB,uBACjBE,EADiB,EACjBA,KAMPC,QAAQC,IAAIF,EAAM,OAPM,kBAQjBA,GARiB,2CAAH,sDAWZG,EAAc,mCAAG,sGACHX,EAASO,IAAI,iBADV,uBAClBC,EADkB,EAClBA,KACRC,QAAQC,IAAIF,EAAM,gEAFQ,kBAGnBA,GAHmB,2CAAH,qDAOdI,EAAY,mCAAG,WAAMC,GAAN,yFACHb,EAASO,IAAT,gBAAsBM,IADnB,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAMZM,EAAW,mCAAG,WAAMD,GAAN,yFACAb,EAASO,IAAT,iBAAuBM,EAAvB,aADA,uBACfL,EADe,EACfA,KACRC,QAAQC,IAAIF,EAAM,gEAFK,kBAGlBA,GAHkB,2CAAH,sDAMXO,EAAc,mCAAG,WAAMF,GAAN,yFACHb,EAASO,IAAT,iBAAuBM,EAAvB,aADG,uBAClBL,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD,yGCa3B,UA9CiB,WACf,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,GAEX,IAAME,EAAS,mCAAG,8GAEKZ,EAAAA,EAAAA,IAAYE,GAFjB,OAERR,EAFQ,OAGdY,EAAQZ,EAAKW,MAHC,gDAKdG,EAAS,EAAD,IALM,yBAOdE,GAAW,GAPG,4EAAH,qDAUfE,GACD,GAAE,CAACV,IAEJ,IAAMW,EAAWR,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAA7B,OACxB,0BACGA,GACC,gBACEC,IAAG,6DAAwDD,GAC3DE,IAAI,MAGN,gBAAKD,IAAI,uCAAuCC,IAAI,MAEtD,uBAAIJ,KACJ,uBAAIC,MAVGF,EADe,IAgB1B,OACE,gCACGR,IAAS,iCACTE,IAAa,sCACG,IAAhBJ,EAAKgB,SAAgB,wBAAKR,MAGhC,C","sources":["components/shared/services/movies-api.js","pages/CastPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n    params: {\n        api_key: 'd91911ebb88751cf9e5c4b8fdf4412c9',\n    }\n})\n\nexport const searchMovies = async (query) => {\n    const {data} = await instance.get('search/movie', {\n        params: {\n            query,\n           \n        }\n    })\n    console.log(data, \"api\")\n    return data;\n}\n\nexport const getMostPopular = async () => {\n    const { data } = await instance.get('movie/popular')\n    console.log(data, \"популярніе\")\n    return data;\n}\n\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`movie/${id}`);\n  return data;\n}\n\n\nexport const getCastById = async id => {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    console.log(data, \"популярніе\")\n  return data;\n};\n\nexport const getReviewsById = async id => {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n}\n","// import { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { getCastById } from 'components/shared/services/movies-api';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchCast = async () => {\n      try {\n        const data = await getCastById(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  const elements = cast.map(({ cast_id, name, character, profile_path }) => (\n    <li key={cast_id}>\n      {profile_path ? (\n        <img\n          src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2${profile_path}`}\n          alt=\"\"\n        />\n      ) : (\n        <img src=\"https://picsum.photos/id/237/320/240\" alt=\"\" />\n      )}\n      <p>{name}</p>\n      <p>{character}</p>\n    </li>\n  ));\n\n  // для кей взят каст_ид\n  return (\n    <>\n      {error && <p>error</p>}\n      {isLoading && <p>...Loading</p>}\n      {cast.length !== 0 && <ul>{elements}</ul>}\n    </>\n  );\n};\nexport default CastPage;\n"],"names":["instance","axios","baseURL","params","api_key","searchMovies","query","get","data","console","log","getMostPopular","getMovieById","id","getCastById","getReviewsById","movieId","useParams","useState","cast","setCast","error","setError","isLoading","setLoading","useEffect","fetchCast","elements","map","cast_id","name","character","profile_path","src","alt","length"],"sourceRoot":""}